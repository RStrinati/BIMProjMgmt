<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>BIM Project Management System</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <style>
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    
    #root {
      height: 100vh;
    }
  </style>
</head>
<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  
  <!-- React Libraries via CDN -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script crossorigin src="https://unpkg.com/@emotion/react@11.10.0/dist/emotion-react.umd.min.js"></script>
  <script crossorigin src="https://unpkg.com/@emotion/styled@11.10.0/dist/emotion-styled.umd.min.js"></script>
  <script crossorigin src="https://unpkg.com/@mui/material@5.11.0/umd/material-ui.development.js"></script>
  <script crossorigin src="https://unpkg.com/@mui/icons-material@5.11.0/umd/material-ui-icons.development.js"></script>
  <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  
  <!-- Simplified React App -->
  <script type="text/babel">
    const { useState, useEffect, createContext, useContext } = React;
    const { 
      AppBar, Toolbar, Typography, Drawer, List, ListItem, ListItemIcon, 
      ListItemText, Box, CssBaseline, ThemeProvider, createTheme, Paper,
      Grid, Card, CardContent, Button, TextField, Table, TableBody, 
      TableCell, TableContainer, TableHead, TableRow, Chip
    } = MaterialUI;
    const { 
      Dashboard, Assignment, People, FolderOpen, Description, 
      BookmarkBorder, Settings, Add
    } = MaterialUIIcons;

    // Create theme
    const theme = createTheme({
      palette: {
        primary: { main: '#1976d2' },
        secondary: { main: '#dc004e' },
      },
    });

    // API Service
    const apiService = {
      async request(endpoint, options = {}) {
        const url = `/api${endpoint}`;
        const config = {
          headers: { 'Content-Type': 'application/json', ...options.headers },
          ...options,
        };

        try {
          const response = await fetch(url, config);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return await response.json();
        } catch (error) {
          console.error(`API request failed for ${endpoint}:`, error);
          throw error;
        }
      },

      async getProjects() {
        return this.request('/projects');
      },

      async createProject(projectData) {
        return this.request('/projects', {
          method: 'POST',
          body: JSON.stringify(projectData),
        });
      }
    };

    // Project Context
    const ProjectContext = createContext();

    const useProject = () => {
      const context = useContext(ProjectContext);
      if (!context) {
        throw new Error('useProject must be used within a ProjectProvider');
      }
      return context;
    };

    const ProjectProvider = ({ children }) => {
      const [projects, setProjects] = useState([]);
      const [loading, setLoading] = useState(false);
      const [error, setError] = useState(null);

      const loadProjects = async () => {
        try {
          setLoading(true);
          const projectsData = await apiService.getProjects();
          setProjects(projectsData);
        } catch (err) {
          setError('Failed to load projects');
          console.error('Error loading projects:', err);
        } finally {
          setLoading(false);
        }
      };

      useEffect(() => {
        loadProjects();
      }, []);

      const value = { projects, loading, error, loadProjects };

      return React.createElement(ProjectContext.Provider, { value }, children);
    };

    // Dashboard Component
    const Dashboard = () => {
      const { projects, loading } = useProject();

      const StatCard = ({ title, value, icon, color = 'primary' }) => 
        React.createElement(Card, null,
          React.createElement(CardContent, null,
            React.createElement(Box, { 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'space-between' 
            },
              React.createElement(Box, null,
                React.createElement(Typography, { 
                  color: 'textSecondary', 
                  gutterBottom: true, 
                  variant: 'body2' 
                }, title),
                React.createElement(Typography, { variant: 'h4', component: 'div' }, value)
              ),
              React.createElement(Box, { color: `${color}.main` }, icon)
            )
          )
        );

      if (loading) {
        return React.createElement(Typography, null, 'Loading...');
      }

      return React.createElement(Box, null,
        React.createElement(Typography, { variant: 'h4', gutterBottom: true }, 'Dashboard'),
        React.createElement(Grid, { container: true, spacing: 3, sx: { mb: 3 } },
          React.createElement(Grid, { item: true, xs: 12, sm: 6, md: 3 },
            React.createElement(StatCard, {
              title: 'Total Projects',
              value: projects.length,
              icon: React.createElement(Assignment, { fontSize: 'large' }),
              color: 'primary'
            })
          ),
          React.createElement(Grid, { item: true, xs: 12, sm: 6, md: 3 },
            React.createElement(StatCard, {
              title: 'Active Projects',
              value: projects.filter(p => p.status === 'Active').length,
              icon: React.createElement(People, { fontSize: 'large' }),
              color: 'success'
            })
          )
        ),
        React.createElement(Paper, { sx: { p: 2, mt: 3 } },
          React.createElement(Typography, { variant: 'h6', gutterBottom: true }, 'Recent Projects'),
          React.createElement(TableContainer, null,
            React.createElement(Table, null,
              React.createElement(TableHead, null,
                React.createElement(TableRow, null,
                  React.createElement(TableCell, null, 'Project Name'),
                  React.createElement(TableCell, null, 'Status'),
                  React.createElement(TableCell, null, 'Created')
                )
              ),
              React.createElement(TableBody, null,
                projects.slice(0, 5).map((project, index) =>
                  React.createElement(TableRow, { key: project.project_id || index },
                    React.createElement(TableCell, null, project.project_name || project.name || 'Unnamed Project'),
                    React.createElement(TableCell, null,
                      React.createElement(Chip, {
                        label: project.status || 'Active',
                        color: project.status === 'Active' ? 'success' : 'default',
                        size: 'small'
                      })
                    ),
                    React.createElement(TableCell, null, 
                      project.created_date ? new Date(project.created_date).toLocaleDateString() : '-'
                    )
                  )
                )
              )
            )
          )
        )
      );
    };

    // Main App Component
    const App = () => {
      const [currentView, setCurrentView] = useState('dashboard');
      const drawerWidth = 240;

      const menuItems = [
        { text: 'Dashboard', value: 'dashboard', icon: React.createElement(Dashboard) },
        { text: 'Project Setup', value: 'projects', icon: React.createElement(Settings) },
        { text: 'Task Management', value: 'tasks', icon: React.createElement(Assignment) },
        { text: 'Resource Management', value: 'resources', icon: React.createElement(People) },
        { text: 'Review Management', value: 'reviews', icon: React.createElement(Assignment) },
        { text: 'Document Management', value: 'documents', icon: React.createElement(Description) },
        { text: 'ACC Integration', value: 'acc', icon: React.createElement(FolderOpen) },
        { text: 'Project Bookmarks', value: 'bookmarks', icon: React.createElement(BookmarkBorder) },
      ];

      const renderContent = () => {
        switch (currentView) {
          case 'dashboard':
            return React.createElement(Dashboard);
          case 'projects':
            return React.createElement(Typography, { variant: 'h4' }, 'Project Setup - Coming Soon');
          default:
            return React.createElement(Typography, { variant: 'h4' }, `${currentView} - Coming Soon`);
        }
      };

      return React.createElement(ThemeProvider, { theme },
        React.createElement(ProjectProvider, null,
          React.createElement(Box, { sx: { display: 'flex' } },
            React.createElement(CssBaseline),
            React.createElement(AppBar, {
              position: 'fixed',
              sx: { width: `calc(100% - ${drawerWidth}px)`, ml: `${drawerWidth}px` }
            },
              React.createElement(Toolbar, null,
                React.createElement(Typography, { variant: 'h6', noWrap: true, component: 'div' },
                  'BIM Project Management System'
                )
              )
            ),
            React.createElement(Drawer, {
              sx: {
                width: drawerWidth,
                flexShrink: 0,
                '& .MuiDrawer-paper': { width: drawerWidth, boxSizing: 'border-box' }
              },
              variant: 'permanent',
              anchor: 'left'
            },
              React.createElement(Toolbar),
              React.createElement(Box, { sx: { overflow: 'auto' } },
                React.createElement(List, null,
                  menuItems.map((item) =>
                    React.createElement(ListItem, {
                      button: true,
                      key: item.text,
                      onClick: () => setCurrentView(item.value)
                    },
                      React.createElement(ListItemIcon, null, item.icon),
                      React.createElement(ListItemText, { primary: item.text })
                    )
                  )
                )
              )
            ),
            React.createElement(Box, {
              component: 'main',
              sx: { flexGrow: 1, bgcolor: 'background.default', p: 3 }
            },
              React.createElement(Toolbar),
              renderContent()
            )
          )
        )
      );
    };

    // Render the App
    const container = document.getElementById('root');
    const root = ReactDOM.createRoot(container);
    root.render(React.createElement(App));
  </script>
</body>
</html>