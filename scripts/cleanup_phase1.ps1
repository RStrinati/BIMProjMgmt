# BIM Project Management - Phase 1 Emergency Cleanup Script
# Run this script to perform immediate high-priority cleanup
# Author: Generated by GitHub Copilot
# Date: October 15, 2025

param(
    [switch]$DryRun = $false,
    [switch]$Verbose = $false
)

$ErrorActionPreference = "Stop"
$RootDir = Split-Path -Parent (Split-Path -Parent $PSScriptRoot)

Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "BIM Project Management - Phase 1 Cleanup" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""

if ($DryRun) {
    Write-Host "[DRY RUN MODE] No files will be moved or modified" -ForegroundColor Yellow
    Write-Host ""
}

# Change to root directory
Set-Location $RootDir

# =====================================
# Step 1: Move misplaced test files
# =====================================
Write-Host "Step 1: Moving misplaced test files to /tests..." -ForegroundColor Green

$testFilesToMove = @(
    @{Source="comprehensive_test.py"; Dest="tests/test_comprehensive.py"},
    @{Source="project_test.py"; Dest="tests/test_project.py"},
    @{Source="simple_test.py"; Dest="tests/test_simple.py"},
    @{Source="ui_test.py"; Dest="tests/test_ui_basic.py"},
    @{Source="test_acc_api.py"; Dest="tests/test_acc_api.py"},
    @{Source="test_acc_connector.py"; Dest="tests/test_acc_connector.py"},
    @{Source="test_validation.py"; Dest="tests/test_validation.py"}
)

$movedTests = 0
foreach ($file in $testFilesToMove) {
    if (Test-Path $file.Source) {
        if ($Verbose) { Write-Host "  Moving: $($file.Source) -> $($file.Dest)" }
        if (-not $DryRun) {
            Move-Item -Path $file.Source -Destination $file.Dest -Force
        }
        $movedTests++
        Write-Host "  ✓ $($file.Source)" -ForegroundColor Gray
    } else {
        Write-Host "  ⊘ $($file.Source) (not found)" -ForegroundColor DarkGray
    }
}
Write-Host "  Moved $movedTests test files" -ForegroundColor Green
Write-Host ""

# =====================================
# Step 2: Move root markdown docs
# =====================================
Write-Host "Step 2: Moving root markdown docs to /docs..." -ForegroundColor Green

# Create security subfolder if needed
if (-not (Test-Path "docs/security")) {
    if ($Verbose) { Write-Host "  Creating docs/security directory" }
    if (-not $DryRun) {
        New-Item -ItemType Directory -Path "docs/security" -Force | Out-Null
    }
}

$docsToMove = @(
    @{Source="CUSTOM_ATTRIBUTES_COMPLETE.md"; Dest="docs/CUSTOM_ATTRIBUTES_COMPLETE.md"},
    @{Source="DATA_IMPORTS_COMPLETE_INTEGRATION.md"; Dest="docs/DATA_IMPORTS_COMPLETE_INTEGRATION.md"},
    @{Source="REACT_COMPONENTS_INTEGRATED.md"; Dest="docs/REACT_COMPONENTS_INTEGRATED.md"},
    @{Source="REACT_FRONTEND_SETUP_COMPLETE.md"; Dest="docs/REACT_FRONTEND_SETUP_COMPLETE.md"},
    @{Source="REVIZTO_EXTRACTION_README.md"; Dest="docs/REVIZTO_EXTRACTION_README.md"},
    @{Source="REVIZTO_INTEGRATION_FIX.md"; Dest="docs/REVIZTO_INTEGRATION_FIX.md"},
    @{Source="SECURITY_INCIDENT_REPORT.md"; Dest="docs/security/SECURITY_INCIDENT_REPORT.md"}
)

$movedDocs = 0
foreach ($file in $docsToMove) {
    if (Test-Path $file.Source) {
        if ($Verbose) { Write-Host "  Moving: $($file.Source) -> $($file.Dest)" }
        if (-not $DryRun) {
            Move-Item -Path $file.Source -Destination $file.Dest -Force
        }
        $movedDocs++
        Write-Host "  ✓ $($file.Source)" -ForegroundColor Gray
    } else {
        Write-Host "  ⊘ $($file.Source) (not found)" -ForegroundColor DarkGray
    }
}
Write-Host "  Moved $movedDocs documentation files" -ForegroundColor Green
Write-Host ""

# =====================================
# Step 3: Archive deprecated files
# =====================================
Write-Host "Step 3: Archiving deprecated files..." -ForegroundColor Green

# Create archive directory if needed
if (-not (Test-Path "archive")) {
    if ($Verbose) { Write-Host "  Creating archive directory" }
    if (-not $DryRun) {
        New-Item -ItemType Directory -Path "archive" -Force | Out-Null
    }
}

$deprecatedFiles = @(
    @{Source="phase1_enhanced_ui.py"; Dest="archive/phase1_enhanced_ui.py"; Reason="Superseded by run_enhanced_ui.py"},
    @{Source="phase1_enhanced_database.py"; Dest="archive/phase1_enhanced_database.py"; Reason="Superseded by database.py"}
)

$archivedFiles = 0
foreach ($file in $deprecatedFiles) {
    if (Test-Path $file.Source) {
        if ($Verbose) { Write-Host "  Archiving: $($file.Source) - $($file.Reason)" }
        if (-not $DryRun) {
            Move-Item -Path $file.Source -Destination $file.Dest -Force
        }
        $archivedFiles++
        Write-Host "  ✓ $($file.Source)" -ForegroundColor Gray
    } else {
        Write-Host "  ⊘ $($file.Source) (not found)" -ForegroundColor DarkGray
    }
}
Write-Host "  Archived $archivedFiles deprecated files" -ForegroundColor Green
Write-Host ""

# =====================================
# Step 4: Check database_pool.py usage
# =====================================
Write-Host "Step 4: Checking database_pool.py usage..." -ForegroundColor Green

if (Test-Path "database_pool.py") {
    Write-Host "  ⚠ database_pool.py found - checking usage..." -ForegroundColor Yellow
    
    # Search for imports in codebase
    $poolImports = Select-String -Path "*.py" -Pattern "import.*database_pool|from.*database_pool" -ErrorAction SilentlyContinue
    
    if ($poolImports) {
        Write-Host "  ⚠ database_pool.py is still in use:" -ForegroundColor Yellow
        foreach ($import in $poolImports | Select-Object -First 5) {
            Write-Host "    - $($import.Filename):$($import.LineNumber)" -ForegroundColor Gray
        }
        Write-Host "  ⚠ NOT archiving - manual review required" -ForegroundColor Yellow
    } else {
        Write-Host "  ✓ No imports found - safe to archive" -ForegroundColor Green
        if (-not $DryRun) {
            Move-Item -Path "database_pool.py" -Destination "archive/database_pool.py" -Force
            Write-Host "  ✓ Archived database_pool.py" -ForegroundColor Gray
        } else {
            Write-Host "  [DRY RUN] Would archive database_pool.py" -ForegroundColor Yellow
        }
    }
} else {
    Write-Host "  ⊘ database_pool.py not found" -ForegroundColor DarkGray
}
Write-Host ""

# =====================================
# Step 5: Consolidate summary files
# =====================================
Write-Host "Step 5: Consolidating import summary files..." -ForegroundColor Green

if ((Test-Path "acc_import_summary.txt") -or (Test-Path "rvt_import_summary.txt")) {
    $summaryContent = @"
# Data Imports Summary

> **Generated:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
> **Consolidated from:** acc_import_summary.txt, rvt_import_summary.txt

## ACC Import Summary

"@

    if (Test-Path "acc_import_summary.txt") {
        $accContent = Get-Content "acc_import_summary.txt" -Raw
        $summaryContent += "`n``````text`n$accContent`n```````n"
        if ($Verbose) { Write-Host "  Added ACC import summary" }
    }

    $summaryContent += "`n## Revit Health Import Summary`n"

    if (Test-Path "rvt_import_summary.txt") {
        $rvtContent = Get-Content "rvt_import_summary.txt" -Raw
        $summaryContent += "`n``````text`n$rvtContent`n```````n"
        if ($Verbose) { Write-Host "  Added Revit health summary" }
    }

    if (-not $DryRun) {
        Set-Content -Path "docs/DATA_IMPORTS_SUMMARY.md" -Value $summaryContent -Force
        Write-Host "  ✓ Created docs/DATA_IMPORTS_SUMMARY.md" -ForegroundColor Gray
        
        # Move originals to archive
        if (Test-Path "acc_import_summary.txt") {
            Move-Item -Path "acc_import_summary.txt" -Destination "archive/acc_import_summary.txt" -Force
        }
        if (Test-Path "rvt_import_summary.txt") {
            Move-Item -Path "rvt_import_summary.txt" -Destination "archive/rvt_import_summary.txt" -Force
        }
        Write-Host "  ✓ Archived original summary files" -ForegroundColor Gray
    } else {
        Write-Host "  [DRY RUN] Would create DATA_IMPORTS_SUMMARY.md" -ForegroundColor Yellow
    }
} else {
    Write-Host "  ⊘ No summary files found" -ForegroundColor DarkGray
}
Write-Host ""

# =====================================
# Summary
# =====================================
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "Phase 1 Cleanup Complete!" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Summary:" -ForegroundColor White
Write-Host "  Test files moved:      $movedTests" -ForegroundColor Gray
Write-Host "  Documentation moved:   $movedDocs" -ForegroundColor Gray
Write-Host "  Files archived:        $archivedFiles" -ForegroundColor Gray
Write-Host ""

if ($DryRun) {
    Write-Host "This was a DRY RUN. Run without -DryRun flag to apply changes." -ForegroundColor Yellow
} else {
    Write-Host "Next steps:" -ForegroundColor White
    Write-Host "  1. Review changes: git status" -ForegroundColor Gray
    Write-Host "  2. Run tests: pytest tests/" -ForegroundColor Gray
    Write-Host "  3. Commit changes: git add . && git commit -m 'Phase 1 cleanup'" -ForegroundColor Gray
    Write-Host "  4. Proceed to Phase 2: See CLEANUP_REPORT.md" -ForegroundColor Gray
}
Write-Host ""
