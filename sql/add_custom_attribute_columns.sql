-- =====================================================================================
-- CUSTOM ATTRIBUTES EXPANSION FOR vw_issues_expanded
-- =====================================================================================
-- This script adds ALL custom attribute columns to the issues_expanded view
-- Generated by: tools/custom_attributes_implementation_guide.py
-- Date: 2025-10-08
--
-- CUSTOM ATTRIBUTES FOUND:
--   1. Building Level (3 projects) - Building location/floor
--   2. Clash Level (3 projects) - Severity of clash issues
--   3. Location (2 projects) - Physical location on site
--   4. Location 01 (1 project) - Same as Location but different naming
--   5. Phase (3 projects) - Construction phase
--   6. Priority (1 project - SINSW Melrose Park HS) - Issue priority
-- =====================================================================================

-- INSTRUCTIONS:
-- 1. Open: sql/update_vw_issues_expanded_with_priority.sql
-- 2. Find the existing Priority column (around line 251-257)
-- 3. REPLACE the single Priority column with the section below
-- 4. Execute the full ALTER VIEW statement
-- 5. Test with the queries at the bottom of this file

-- =====================================================================================
-- REPLACEMENT SECTION - Custom Attributes Columns
-- =====================================================================================
-- Replace this section in the view (starting after custom_attributes_json):

    -- ðŸ”¹ Custom Attributes Expanded - All Available Attributes
    -- Each attribute is extracted from the custom_attributes_json field
    -- NULL values indicate the attribute doesn't exist for that project/issue
    
    -- Building Level: In-ground, Level 00, Level 00 Mezz, Roof Level
    (
        SELECT TOP 1 [value]
        FROM OPENJSON(ca.custom_attributes_json)
        WITH ([name] NVARCHAR(100), [value] NVARCHAR(MAX))
        WHERE [name] = 'Building Level'
    ) AS [Building_Level],
    
    -- Clash Level: L1-Critical, L2-Important, L3-Significant, L4-Minor
    (
        SELECT TOP 1 [value]
        FROM OPENJSON(ca.custom_attributes_json)
        WITH ([name] NVARCHAR(100), [value] NVARCHAR(MAX))
        WHERE [name] = 'Clash Level'
    ) AS [Clash_Level],
    
    -- Location: Admin, Fire Pump Building, Gen Yard, MV Room, ROMP 01-04, etc.
    (
        SELECT TOP 1 [value]
        FROM OPENJSON(ca.custom_attributes_json)
        WITH ([name] NVARCHAR(100), [value] NVARCHAR(MAX))
        WHERE [name] = 'Location'
    ) AS [Location],
    
    -- Location 01: Same values as Location but used in different project
    (
        SELECT TOP 1 [value]
        FROM OPENJSON(ca.custom_attributes_json)
        WITH ([name] NVARCHAR(100), [value] NVARCHAR(MAX))
        WHERE [name] = 'Location 01'
    ) AS [Location_01],
    
    -- Phase: PHASE 01, PHASE 02, PHASE 03, PHASE 04
    (
        SELECT TOP 1 [value]
        FROM OPENJSON(ca.custom_attributes_json)
        WITH ([name] NVARCHAR(100), [value] NVARCHAR(MAX))
        WHERE [name] = 'Phase'
    ) AS [Phase],
    
    -- Priority: Blocker, Critical, Major, Minor, Trivial (SINSW project only)
    (
        SELECT TOP 1 [value]
        FROM OPENJSON(ca.custom_attributes_json)
        WITH ([name] NVARCHAR(100), [value] NVARCHAR(MAX))
        WHERE [name] = 'Priority'
    ) AS [Priority]

-- =====================================================================================
-- END REPLACEMENT SECTION
-- =====================================================================================

-- =====================================================================================
-- TESTING QUERIES - Run these after updating the view
-- =====================================================================================

-- 1. Verify all columns exist and have data
SELECT 
    COUNT(*) AS total_issues,
    COUNT(Building_Level) AS has_building_level,
    COUNT(Clash_Level) AS has_clash_level,
    COUNT(Location) AS has_location,
    COUNT(Location_01) AS has_location_01,
    COUNT(Phase) AS has_phase,
    COUNT(Priority) AS has_priority
FROM acc_data_schema.dbo.vw_issues_expanded;

-- 2. Sample rows with custom attributes
SELECT TOP 10
    issue_id,
    display_id,
    title,
    project_name,
    Building_Level,
    Clash_Level,
    Location,
    Location_01,
    Phase,
    Priority
FROM acc_data_schema.dbo.vw_issues_expanded
WHERE 
    Building_Level IS NOT NULL 
    OR Clash_Level IS NOT NULL 
    OR Location IS NOT NULL
    OR Location_01 IS NOT NULL
    OR Phase IS NOT NULL
    OR Priority IS NOT NULL
ORDER BY created_at DESC;

-- 3. Count issues by Priority (SINSW project)
SELECT 
    Priority,
    COUNT(*) AS issue_count
FROM acc_data_schema.dbo.vw_issues_expanded
WHERE Priority IS NOT NULL
GROUP BY Priority
ORDER BY 
    CASE Priority
        WHEN 'Blocker' THEN 1
        WHEN 'Critical' THEN 2
        WHEN 'Major' THEN 3
        WHEN 'Minor' THEN 4
        WHEN 'Trivial' THEN 5
        ELSE 6
    END;

-- 4. Count issues by Clash Level
SELECT 
    Clash_Level,
    COUNT(*) AS issue_count
FROM acc_data_schema.dbo.vw_issues_expanded
WHERE Clash_Level IS NOT NULL
GROUP BY Clash_Level
ORDER BY 
    CASE Clash_Level
        WHEN 'L1 - Critical' THEN 1
        WHEN 'L2 - Important' THEN 2
        WHEN 'L3 - Significant' THEN 3
        WHEN 'L4 - Minor' THEN 4
        ELSE 5
    END;

-- 5. Count issues by Phase
SELECT 
    Phase,
    COUNT(*) AS issue_count
FROM acc_data_schema.dbo.vw_issues_expanded
WHERE Phase IS NOT NULL
GROUP BY Phase
ORDER BY Phase;

-- 6. Count issues by Location (combining both Location and Location_01)
SELECT 
    COALESCE(Location, Location_01) AS location_value,
    COUNT(*) AS issue_count
FROM acc_data_schema.dbo.vw_issues_expanded
WHERE Location IS NOT NULL OR Location_01 IS NOT NULL
GROUP BY COALESCE(Location, Location_01)
ORDER BY issue_count DESC;

-- 7. Issues breakdown by project and custom attributes used
SELECT 
    project_name,
    COUNT(*) AS total_issues,
    COUNT(DISTINCT CASE WHEN Building_Level IS NOT NULL THEN issue_id END) AS has_building,
    COUNT(DISTINCT CASE WHEN Clash_Level IS NOT NULL THEN issue_id END) AS has_clash,
    COUNT(DISTINCT CASE WHEN Location IS NOT NULL OR Location_01 IS NOT NULL THEN issue_id END) AS has_location,
    COUNT(DISTINCT CASE WHEN Phase IS NOT NULL THEN issue_id END) AS has_phase,
    COUNT(DISTINCT CASE WHEN Priority IS NOT NULL THEN issue_id END) AS has_priority
FROM acc_data_schema.dbo.vw_issues_expanded
GROUP BY project_name
ORDER BY total_issues DESC;

-- 8. Full custom attributes detail for a specific issue
SELECT 
    issue_id,
    display_id,
    title,
    project_name,
    status,
    created_at,
    -- All custom attributes
    Building_Level,
    Clash_Level,
    Location,
    Location_01,
    Phase,
    Priority,
    -- Raw JSON for comparison
    custom_attributes_json
FROM acc_data_schema.dbo.vw_issues_expanded
WHERE Priority = 'Critical'
ORDER BY created_at DESC;

-- 9. Verify no data loss - compare JSON vs extracted columns
-- This checks if any attributes in JSON aren't being extracted
WITH JsonAttributes AS (
    SELECT 
        issue_id,
        JSON_VALUE(attr.value, '$.name') AS attr_name,
        JSON_VALUE(attr.value, '$.value') AS attr_value
    FROM acc_data_schema.dbo.vw_issues_expanded
    CROSS APPLY OPENJSON(custom_attributes_json) AS attr
    WHERE custom_attributes_json IS NOT NULL
)
SELECT 
    attr_name,
    COUNT(DISTINCT issue_id) AS issue_count
FROM JsonAttributes
WHERE attr_name NOT IN ('Building Level', 'Clash Level', 'Location', 'Location 01', 'Phase', 'Priority')
GROUP BY attr_name
ORDER BY issue_count DESC;
-- Expected result: Empty set (all attributes are captured)

-- =====================================================================================
-- NOTES
-- =====================================================================================
-- 
-- 1. NULL VALUES: If an attribute doesn't exist for a project, the column will be NULL
--    This is NORMAL and expected.
--
-- 2. PERFORMANCE: OPENJSON is reasonably performant for this use case.
--    If you experience slowness with millions of rows, consider:
--    - Adding computed columns with indexing
--    - Creating a separate custom_attributes table with pivoted columns
--
-- 3. NEW ATTRIBUTES: When new custom attributes are added in ACC:
--    - Re-import ACC data
--    - Re-run: python tools\custom_attributes_implementation_guide.py
--    - Add new columns following the same pattern
--    - Update this file with new attributes
--
-- 4. COLUMN NAMING: 
--    - Spaces in attribute names are replaced with underscores in column names
--    - "Building Level" â†’ [Building_Level]
--    - "Location 01" â†’ [Location_01]
--
-- 5. SCHEMA CONSTANTS: Remember to update constants/schema.py:
--    - Add new column constants for each custom attribute
--    - Example: BUILDING_LEVEL = "Building_Level"
--
-- =====================================================================================
